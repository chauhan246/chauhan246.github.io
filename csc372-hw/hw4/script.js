let wins = 0;
let losses = 0;
let ties = 0;
let userThrowName = '';

const allUserThrows = qsa('.throw')

// Add click event to all user throw choices
for (let index = 0; index < allUserThrows.length; index++) {
    const choice = allUserThrows[index];
    choice.addEventListener('click', selectUserThrow)
}

// User selected choice
function selectUserThrow(userThrowEvent) {
    const choice = userThrowEvent.currentTarget;
    userThrowName = choice.getAttribute('data-throw');
    highlightUserThrow(choice);
    // Enable the play button
    const playButton = id('play-button');
    playButton.disabled = false;
}

// Highlight user selected border
function highlightUserThrow(selectedChoice) {
    qsa('.throw').forEach(choice => {
        choice.classList.remove('selected');
    });
    selectedChoice.classList.add('selected');
}

const playButton = id('play-button');
playButton.addEventListener('click', startTheGame);

// Start the game when button is clicked, reset result
function startTheGame() {
    const resultEle = id('result');
    resultEle.classList.remove('lose');
    resultEle.classList.remove('win');
    resultEle.textContent = "Game in progess...";

    playRound(userThrowName);
    // Disable play button until the next game
    const playButton = id('play-button');
    playButton.disabled = true;
}

// Start the round and have the computer auto select a throw
function playRound(userThrowName) {
    const allComputerThrowNames = ['rock', 'paper', 'scissors'];
    const allComputerThrowImages = ['images/rock.png', 'images/paper.png', 'images/scissors.png'];
    const computerThrowEle = id('computer-throw');

    let index = 0;
    const interval = setInterval(() => {
        computerThrowEle.src = allComputerThrowImages[index];
        index = (index + 1) % allComputerThrowImages.length;
    }, 500);

    setTimeout(() => {
        clearInterval(interval);

        const autoGeneratedChoice = Math.floor(Math.random() * 3);
        const computerThrowImage = allComputerThrowImages[autoGeneratedChoice];
        const computerThrowName = allComputerThrowNames[autoGeneratedChoice];

        computerThrowEle.src = computerThrowImage;
        decideWinner(userThrowName, computerThrowName);
    }, 3000);
}

// Decide winner by comparing user and computer choices
function decideWinner(userThrowName, computerThrowName) {
    const resultEle = id('result');
    let userWin = true;
    switch (userThrowName) {
        case 'rock':
            if (computerThrowName === 'paper') {
                userWin = false;
            }
            break;
        case 'paper':
            if (computerThrowName === 'scissors') {
                userWin = false;
            }
            break;
        case 'scissors':
            if (computerThrowName === 'rock') {
                userWin = false;
            }
            break;
    }

    if (userThrowName === computerThrowName) {
        resultEle.textContent = "It's a tie!";
        resultEle.classList.remove('lose');
        resultEle.classList.remove('win');
        ties++;
    } else if (userWin) {
        resultEle.textContent = "You win!";
        resultEle.classList.remove('lose');
        resultEle.classList.add('win');
        wins++;
    } else {
        resultEle.textContent = "You lose!";
        resultEle.classList.remove('win');
        resultEle.classList.add('lose');
        losses++;
    }
    updateScore();
}

// Update the overall score
function updateScore() {
    const winsEle = id('wins');
    winsEle.textContent = wins;

    const lossesEle = id('losses');
    lossesEle.textContent = losses;

    const tiesEle = id('ties');
    tiesEle.textContent = ties;
}

const resetButton = id('reset-button');
resetButton.addEventListener('click', resetGame);

// Reset the screen 
function resetGame() {
    wins = 0;
    losses = 0;
    ties = 0;

    updateScore();

    const resultEle = id('result');
    resultEle.classList.remove('lose');
    resultEle.classList.remove('win');
    resultEle.textContent = "Make your throw!";

    const computerThrowEle = id('computer-throw');
    computerThrowEle.src = 'images/question-mark.png';


    allUserThrows.forEach(choice => {
        choice.classList.remove('selected');
    });
    // Reset the play button
    const playButton = id('play-button')
    playButton.disabled = true;
}

/*
* Handy Shortcut Functions
*/

function id(id) {
    return document.getElementById(id);
}

function qs(selector) {
    return document.querySelector(selector);
}

function qsa(selector) {
    return document.querySelectorAll(selector);
}
